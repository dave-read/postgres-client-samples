#!/usr/bin/env python

from flask import Flask
import os
import json
import psycopg2
from uritools import urisplit

app = Flask(__name__)
port = int(os.getenv("PORT", 9099))

if 'db-service' in os.environ:
  db_service_name = os.environ['db-service']
  db_service = json.loads(os.environ['VCAP_SERVICES'])[db_service_name][0]
  db_credentials = db_service['credentials']
  host = db_credentials['hostname']
  user = db_credentials['username']
  dbname = db_credentials['name']
  password = db_credentials['password']
  uri = db_credentials["uri"]
else:
  # get parameters from env
  host = os.environ['hostname']
  user = os.environ['username']
  dbname = os.environ['database']
  password = os.environ['password']
  uri = os.environ["uri"]

# default ssl mode
sslmode = "require"

def do_query(connection_string):
  resp = ""
  try:
    conn = psycopg2.connect(connection_string) 
    print "Connection established using:"+connection_string
    cursor = conn.cursor()
    # Fetch all rows from table
    cursor.execute("SELECT table_catalog, table_schema, table_name FROM information_schema.tables where table_type = 'BASE TABLE' and table_schema = 'information_schema';")
    rows = cursor.fetchall()
    # Print all rows
    for row in rows:
      resp = resp + "<br>Data row = (%s, %s, %s)\n" %(str(row[0]), str(row[1]), str(row[2]))
      # clean up
    conn.commit()
    cursor.close()
    conn.close()
  except Exception,e:
    print repr(e)
    resp = resp + repr(e)
  return resp

@app.route('/')
def hello_world():
  # Query using properties
  connect_string_from_properties = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)
  resp = "<html>"
  resp =  "<hr><h2>Using connection properties:"+connect_string_from_properties+"</h2>"
  resp = resp + do_query(connect_string_from_properties)

  # print "Using URI ..."
  # Query again using uri directly 
  resp = resp + "<hr><h2>using URI directly:"+uri+"</h2>"
  resp = resp + do_query(uri)

  # Query using parsed uri
  uri_parts = urisplit(uri)
  uriHost = uri_parts.gethost()
  uriPath = uri_parts.getpath()
  uriUserInfo = uri_parts.getuserinfo()
  (uriUser, uriPassword) = uriUserInfo.split(":",1) 
  parsed_conn_string = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)
  resp = resp + "<hr><h2>Using parsed URI ..."+parsed_conn_string+"</h2>"
  resp = resp + do_query(parsed_conn_string)

  return resp+"</html>"

if __name__ == '__main__':
    # Run the app, listening on all IPs with our chosen port number
    app.run(host='0.0.0.0', port=port)
